---
title: "How to add some personality to your Quarto Blog"
description: "A few of my favourite bells and whistles"
date: "2022-09-20"
categories: ["quarto"]
image: "https://www.ddanieltan.com/404.png"
---

# Start from the basics
The [basic Quarto blog](https://quarto.org/docs/websites/website-blog.html) covers a lot of ground. Here is a detailed walkthrough of how to build a blog with Quarto conducted by Rstudio/Posit, the makers of Quarto. Just following this alone will get you started with a perfectly beautiful and functional blog. 
<iframe width="560" height="315" src="https://www.youtube.com/embed/CVcvXfRyfE0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

However, your blog is also your personal slice out on the internet, and if you can add just a tad bit of your personality into the content, it makes it more enjoyable for your readers. Here are my favourite tips.

:::{.callout-note}
While it is fun to add these bells and whistles, do not lose focus on the most important part of your blog - the content.
:::

# 1. Enrich your Appendices
An important facet that Quarto supports is [Scholarly Writing](https://quarto.org/docs/authoring/title-blocks.html). With a few simple flags in your [_metadata.yml](https://github.com/ddanieltan/ddanieltan.com/blob/main/posts/_metadata.yml) file, you can easily configure each blog post to neatly organize your footnotes, references, license and citation information in an appendix section at the bottom of your post.

This [appendix section](https://quarto.org/docs/authoring/appendices.html) is easily customizable by inserting any other information you think your reader might appreciate. 1 of the simplest things to add is a `Last Updated` section. I insert this block of code at the bottom of every post, and each time I make a change to a post and re-render, this code chunk will automatically reflect this last updated date.

```{python}
#| echo: fenced
#| output: false
from datetime import date
print(f"Last updated: {date.today().strftime('%d %B %y')}")
```

If you like to do more than just log a post's last update, I recommend checking out [Danielle Navarro's](https://blog.djnavarro.net/) [source code](https://github.com/djnavarro/quarto-blog) for her quarto blog for a more impressive appendix. 

# 2. Make custom CSS tweaks
The default Quarto blog comes ready with many Bootstrap themes from the [Bootswatch project](https://bootswatch.com/). I found that a really efficient way to tackle styling for your blog is to start with one of these ready-made themes (I chose Litera) and then add on custom css to make small tweaks. I am consistently surprised how some seemingly small css tweaks can create a dramatic effect on your overall site.

I wrote this [SCSS snippet](https://github.com/ddanieltan/ddanieltan.com/blob/main/custom.scss) following steps from [RappA's youtube video](https://youtu.be/ErRX8plZpQE). This block of css helps to perfectly align the elements in my navbar with the margins of my content body. I cannot express in words how much joy this tiny tweak brings me.

```css
.navbar > .container-xxl, .navbar > .container-xl, .navbar > .container-lg, .navbar > .container-md, .navbar > .container-sm, .navbar > .container, .navbar > .container-fluid {
  max-width: 1145px;
  margin: 0 auto;
```

<iframe src="https://giphy.com/embed/l4FB1R0Cz0gFo1YQw" width="480" height="360" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="https://giphy.com/gifs/spongebob-spongebob-squarepants-season-8-l4FB1R0Cz0gFo1YQw">Source: GIPHY</a></p>

# 3. Sneak in Easter Eggs in your page footer
Page footers are generally reserved for important business-y messages. The usual suspects are either copyrights, licenses or "lovingly built with"s. I wanted my blog to be slightly different. I like to reward any reader who has read my posts all the way to the end with a nice easter egg in the form of one of my favourite quotes!

:::{.column-margin}
Scroll down right now and find your easter-egg quote! Thank you for reading my post in its entirety ðŸ˜Š 
:::

:::{.callout-note}
When I first wrote this post, I used Quarto's [pre and post render hooks](https://quarto.org/docs/projects/scripts.html#pre-and-post-render) to insert a new quote into the `page-footer` field of my `_quarto.yml`. But this proved clunky, because `_quarto.yml` was a project-wide config, and I wanted a different quote for every post, which meant I needed to manually trigger this pre-render hook multiple times. As of [this commit](https://github.com/ddanieltan/ddanieltan.com/commit/98c069f1f97fa198fcaa065c87259abae45b72a0), I opted to add my random quotes using code blocks instead. 
:::

I maintain a simple text file with quotes that I enjoy. I simply pick a random quote from this file, wrap the text and insert the output into `<blockquote>` tags like so.

```{python}
#| echo: fenced
#| output: false
import random
import textwrap
with open("../../quotes.txt") as f:
    quotes = f.readlines()
quotes = [q.strip() for q in quotes]
res = random.choice(quotes)
print("\n".join(textwrap.wrap(res)))
```

# 4. Create a custom 404 page
Last but not least, let's not forget that some potential readers might land on a missing page, or use a url with a small typo. No reason to let them be greeted with a humdrum, run-of-the-mill 404 page! Quarto allows you to easily [customize your 404 page](https://quarto.org/docs/websites/website-navigation.html#pages-404). For [my 404 page](https://www.ddanieltan.com/404.html), I chose this simple image I created with DallE2.

![DallE2 with prompt "dogs of different breeds happily running around with 404 text, cartoon style"](/../404.png)

# Conclusion
And there you go, hope you found a tip or two you can use. Let's go make your personal slice of the internet your own ðŸ’ª!

## Appendix {.appendix}
```{python}
#| echo: false
from datetime import date
print(f"Last updated: {date.today().strftime('%d %B %y')}")
```
<blockquote>
```{python}
#| echo: false
import random
import textwrap
with open("../../quotes.txt") as f:
    quotes = f.readlines()
quotes = [q.strip() for q in quotes]
res = random.choice(quotes)
print("\n".join(textwrap.wrap(res)))
```
</blockquote>
