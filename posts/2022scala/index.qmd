---
title: "2022: My Year of Scala"
description: "How I added a new tool to my toolbox"
date: "2022-09-15"
categories: [scala,learning]
image: scalaLogo.png
---
# My Year of ...
Neil Gaiman, [illustrious author](https://en.wikipedia.org/wiki/Neil_Gaiman_bibliography) and [everlasting source of wit](https://www.buzzfeed.com/amphtml/jarrylee/neil-gaiman-wins-twitter), has a really cool mental exercise to help him complete his projects.

> You donâ€™t have to write. You have permission to not write, but you donâ€™t have permission to do anything else.

> I would go down to my lovely little gazebo at the bottom of the garden, sit down, and Iâ€™m absolutely allowed not to do anything. Iâ€™m allowed to sit at my desk, Iâ€™m allowed to stare out at the world, Iâ€™m allowed to do anything I like, as long as it isnâ€™t anything. Not allowed to do a crossword, not allowed to read a book, not allowed to phone a friend, not allowed to make a clay model of something. All Iâ€™m allowed to do is absolutely nothing, or write.

For a couple of years now, I have adapted a version of this exercise to help me complete my learning projects. Every year I make the grand announcement that this will be the year of X. Where X is a learning topic or a new programming language that I wish to focus on. 

:::{.column-margin}
I declared this my year of Scala all the way back in Jan, but I only started this blog in July, which is why this post is published in September ðŸ˜….
:::

![ðŸŽ‰ 2022 year is my year of Scala! ðŸŽ‰](https://media.giphy.com/media/YkKPc5T8mFSdqg8yTa/giphy.gif){fig-align="center"}

Inspired by Neil's rules, my rules for this year are:

- For every project that requires coding, I am going to try and use Scala
- But, I give myself permission to not use Scala if it is just not the right option for my use case
- However, I do not have permission to try out any other shiny new programming language I might be tempted by

# What is Scala?
[Scala](https://www.scala-lang.org/) is a programming language that is probably most famous for consistently showing up as one of the "Top Paying Technologies" in [StackOverflow's annual survey](https://insights.stackoverflow.com/survey) ðŸ¤‘ðŸ¤‘ðŸ¤‘. In Data Science, Scala is famous for being the language used to build the [Apache Spark](https://spark.apache.org/) engine, which makes Scala essentially the core language that "Enterprise Big Data<sup>TM</sup>" is run on.

```scala
// Illustrating Scala's legible syntax
// and method chaining pattern
val inputs = Vector(1,2,3,4,5,6,7,8)
inputs
    .map(x => x + 1)
    .filter(x => x % 2 == 0)
    .slice(2,6)
//res1: Vector[Int] = Vector(6, 8)
```
My 1-liner description of Scala (with the caveat that I am pretty much still a beginner) is that Scala feels like **a language designed for modelling and manipulating data**. 

I enjoy Scala's

- legible and easy-to-read syntax
- encouraged design pattern of running an immutable data source through chains of transformations (which should be familiar to fans of [Python's method chaining](https://tomaugspurger.github.io/method-chaining.html) or [R's pipe](https://style.tidyverse.org/pipes.html))
- ability to give me a [dynamic language experience with the safety of a compiled language](https://www.lihaoyi.com/post/FromFirstPrinciplesWhyScala.html)
- power/scalability out-of-the-box thanks to piggy-backing on the highly optimized JVM
- unique features such as [Case Classes](https://docs.scala-lang.org/tour/case-classes.html), [Implicits](https://docs.scala-lang.org/overviews/core/implicit-classes.html) etc. that gives the language that extra bit of black magic to set it apart

# Why Scala?

The main reason is that I recently joined a team where our main codebase is in Scala. This gives me a practical incentive, as well as, the opportunity to be surrounded by knowledgable colleagues who I can pester with my questions. 

The secondary reason is curiosity. Scala is designed to support both the object-oriented paradigm and the functional programming paradigm. Through Scala, I hope to dip my toes into the great ocean that is [Functional Programming](https://en.wikipedia.org/wiki/Functional_programming). 

:::{.column-margin}
Fingers crossed that one day, I'll be able to explain what a [monad](https://www.youtube.com/watch?v=CMm98RkCgPg) is.
:::

# How has the year gone so far?

Pretty good! I have not burnt out and I have found opportunities to use Scala in my projects for work, school and play. So far I have used Scala to:

1. Write applications to improve my tooling for work

2. Build random number generators for a module for school

3. Create a rudimentary (and incomplete) [blog engine](https://github.com/ddanieltan/scalaBlog)

4. Inch my way through the excellent [Hands-on Scala](https://www.handsonscala.com/) book

5. Automate small scripting tasks (although I'm still not convinced Scala is my 1st choice as a scripting language)

6. Build a simple website without writing 1 line of javascript (ðŸ˜²!!) thanks to [Scala.js](https://www.scala-js.org/)

Additionally, I have also found small ways to engage with the small but fascinating community. For example, I enjoyed learning a little history behind Scala by asking the Reddit community [What's the story behind Scala's logo?](https://www.reddit.com/r/scala/comments/smq3t2/whats_the_story_behind_scalas_logo/).

![My rendition of Scala's logo. What does this look like to you?](scalaLogo.png)

# Ending the year strong

I still have a good couple of months until the end of 2022. I would like to accomplish the following before the end of this year:

- Build a Scala application which serves more users than just myself
- Attempt this year's [Advent of Code](https://adventofcode.com/) in Scala
- Write a recap blog post at the end of the year reflecting what I liked/disliked about Scala

## Appendix {.appendix}
```{python}
#| echo: false
from datetime import date
print(f"Last updated: {date.today().strftime('%d %B %y')}")
```
<blockquote>
```{python}
#| echo: false
import random
import textwrap
with open("../../quotes.txt") as f:
    quotes = f.readlines()
quotes = [q.strip() for q in quotes]
res = random.choice(quotes)
print("\n".join(textwrap.wrap(res)))
```
</blockquote>